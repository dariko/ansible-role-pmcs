-   name: test for variables
    fail:
        msg: "{{pmcs_loop_variables}} is not defined"
    when: pmcs_loop_variables not in vars
    with_items:
    -   pmcs_members
    loop_control:
        loop_var: pmcs_loop_variables

-   name: install os
    include: "{{item}}"
    with_first_found:
    -   "install-{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    -   "install-{{ ansible_distribution }}-{{ ansible_distribution_version}}.yml"
    -   "install-{{ ansible_distribution }}.yml"

-   name: log directory
    file:
        path: /var/log/corosync
        state: directory
        owner: root
        group: root
        mode: 0755

-   name: template configuration
    template:
        src: corosync.conf.j2
        dest: /etc/corosync/corosync.conf
    register: out_pmcs_configuration

-   name: create/read authkey on pmcs_keygen_node
    shell: |
        if [ -f /etc/corosync/authkey ]
        then
            cat /etc/corosync/authkey
        else
            #corosync-keygen {{'-l' if pmcs_keygen_urandom else ''}} &>/dev/null
            openssl rand -base64 {{pmcs_authkey_bits}} > /etc/corosync/authkey
            cat /etc/corosync/authkey
            exit 13
        fi
    failed_when: out_pmcs_authkey.rc not in [0,13]
    register: out_pmcs_authkey
    changed_when: out_pmcs_authkey.rc==13
    when: inventory_hostname==pmcs_keygen_node

-   name: set fact pmcs_authkey
    set_fact:
        pmcs_authkey: "{{out_pmcs_authkey.stdout}}"
    when: inventory_hostname==pmcs_keygen_node

-   name: write authkey
    copy:
        content: "{{hostvars[pmcs_keygen_node].pmcs_authkey}}"
        dest: /etc/corosync/authkey
        owner: root
        group: root
        mode: 0400
    when: inventory_hostname!=pmcs_keygen_node
    register: out_pmcs_authkey

-   name: set pmcs_reload fact
    set_fact:
        pmcs_reload: "{{out_pmcs_configuration is defined and out_pmcs_configuration.changed}}"

-   name: reload corosync configuration
    shell: |
        corosync-cfgtool -R
    when:
    -   pmcs_members|map('extract',hostvars,'pmcs_reload')|select('equalto',True)|list|length != pmcs_members|length
    -   inventory_hostname == pmcs_keygen_node
    delegate_to: |-
        {% set out=[] %}
        {% for h in pmcs_members %}
        {%   if not hostvars[h].pmcs_reload %}
        {%     if out.append(h) %}{% endif %}
        {%   endif %}
        {% endfor %}
        {{ out[0] }}

-   name: give cluster 30 seconds to settle on first start
    pause:
        seconds: 30
    when: pmcs_members|map('extract',hostvars,'pmcs_restart')|select('equalto',True)|list|length == pmcs_members|length

-   name: start, enable services
    service:
        name: "{{item}}"
        state: started
        enabled: yes
    with_items:
    -   corosync
    -   pacemaker
